"""
Django settings for paymentapi project.

Generated by 'django-admin startproject' using Django 2.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import structlog

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(os.path.dirname(__file__))
PROJECT_DIR = os.path.dirname(BASE_DIR)
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'e*xowgi)y^1ri(0i_@$u@ldos3c@5w^9yiiq=6+sggq(^^ddn+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'rest_framework',
	"app_dir.api",
	"rest_framework.authtoken",
	"rolepermissions",
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	# 'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
	"DEFAULT_AUTHENTICATION_CLASSES": (
		"rest_framework.authentication.TokenAuthentication",
	),
	"DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
	'EXCEPTION_HANDLER': 'utils.custom_exception_handler',
}

ROOT_URLCONF = 'configuration.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'configuration.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

BASE_URL = os.environ.get("BASE_URL", "https://localhost:8090/")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = os.environ.get("STATIC_URL", "/static/")
DEFAULT_STATIC_ROOT = os.path.abspath(os.path.join(PROJECT_DIR, "static"))
STATIC_ROOT = os.environ.get("STATIC_ROOT", DEFAULT_STATIC_ROOT)
# STATICFILES_DIRS = (
#     os.path.abspath(
#         os.path.join(PROJECT_DIR, "static")
#     ),
# )
STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.abspath(os.path.join(PROJECT_DIR, "/media"))

# Logging configuration
LOGGING = {
	"version": 1,
	"disable_existing_loggers": False,
	"handlers": {"console": {"level": "DEBUG", "class": "logging.StreamHandler"}},
	"loggers": {
		"django.request": {
			"handlers": ["console"],
			"level": "INFO",
			"propagate": False,
		},
		"": {"handlers": ["console"], "level": "INFO", "propagate": False},
	},
}

ROLEPERMISSIONS_MODULE = 'configuration.settings.roles'


def configure_structlog(environment):
	structlog_processors = [
		structlog.stdlib.add_logger_name,
		structlog.stdlib.add_log_level,
		structlog.stdlib.PositionalArgumentsFormatter(),
		structlog.processors.TimeStamper(fmt="%Y-%m-%d %H:%M:%S"),
		structlog.processors.StackInfoRenderer(),
		structlog.processors.format_exc_info,
	]

	if environment == "development":
		structlog_processors.append(structlog.dev.ConsoleRenderer())
	else:
		structlog_processors.append(structlog.processors.JSONRenderer())

	# this formatter should come last
	structlog_processors.append(structlog.stdlib.ProcessorFormatter.wrap_for_formatter)

	structlog.configure(
		processors=structlog_processors,
		logger_factory=structlog.stdlib.LoggerFactory(),
		cache_logger_on_first_use=True,
	)


# broker url
BROKER_USE_SSL = False
BROKER_URL = "amqp://guest:guest@rabbitmq:5672//"
CELERY_BROKER_TRANSPORT_OPTIONS = {"max_retries": 2}

# celery configs

# CELERY_ROUTES = {
#     "tasks.send_new_email_task": {"queue": "send_new_email_task"},
#     "tasks.extract_new_emails": {"queue": "extract_new_emails"},
#     "task.send_out_welcome_emails": {"queue": "send_out_welcome_emails"},
# }

CELERY_ENABLE_REMOTE_CONTROL = True
BROKER_HEARTBEAT = 10
CELERYD_MAX_TASKS_PER_CHILD = 100

CSRF_COOKIE_SECURE = False
